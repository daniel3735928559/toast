<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet href="style.xsl" type="text/xsl"?>
<post title="Going" date="20090823:225943">
<tag name="vesa" />
<tag name="gdb" />
<tag name="debug" />
<text>

<p>
This is strange.  QEMU claims the faulting address is 0xC00000A7, so we get a
disassembly of what it thinks is going on at and around this address, as well
as a hexdump of the actual memory here: 
</p>

<code>
(gdb) disassemble 0xc0000020 0xc00000f0
Dump of assembler code from 0xc0000020 to 0xc00000f0:
0xc0000020:     add    %bl,-0xff31(%edx)
0xc0000026:     add    %al,(%eax)
0xc0000028:     add    %dl,0x1700cf(%ebx)
0xc000002e:     adc    $0x0,%al
0xc0000030:     add    %al,%al
0xc0000032:     mov    $0x10,%ax
0xc0000036:     mov    %eax,%ds
0xc0000038:     mov    %eax,%fs
0xc000003a:     mov    %eax,%gs
0xc000003c:     mov    %eax,%es
0xc000003e:     mov    %eax,%ss
0xc0000040:     ljmp   $0x8,$0xc0000047
0xc0000047:     call   0xc0000076
0xc000004c:     mov    $0xff,%al
0xc000004e:     out    %al,$0x21
0xc0000050:     out    %al,$0xa1
0xc0000052:     lidtl  0xc00001df
0xc0000059:     sti
0xc000005a:     mov    $0x1,%cl
0xc000005c:     mov    $0x1,%ah
0xc000005e:     shl    %cl,%ah
0xc0000060:     xor    $0xff,%ah
0xc0000063:     in     $0x21,%al
0xc0000065:     and    %ah,%al
0xc0000067:     out    %al,$0x21
0xc0000069:     pushl  0xc00002f5
0xc000006f:     call   0xc0002de5
0xc0000074:     jmp    0xc0000074
0xc0000076:     push   %eax
0xc0000077:     mov    $0x11,%al
0xc0000079:     out    %al,$0x20
0xc000007b:     mov    $0x11,%al
0xc000007d:     out    %al,$0xa0
0xc000007f:     mov    $0x20,%al
0xc0000081:     out    %al,$0x21
0xc0000083:     mov    $0x28,%al
0xc0000085:     out    %al,$0xa1
0xc0000087:     mov    $0x4,%al
0xc0000089:     out    %al,$0x21
0xc000008b:     mov    $0x2,%al
0xc000008d:     out    %al,$0xa1
0xc000008f:     mov    $0x1,%al
0xc0000091:     out    %al,$0x21
0xc0000093:     mov    $0x1,%al
0xc0000095:     out    %al,$0xa1
0xc0000097:     pop    %eax
0xc0000098:     ret
0xc0000099:     push   %esi
0xc000009a:     inc    %ebp
0xc000009b:     push   %ebx
0xc000009c:     inc    %ecx
0xc000009d:     add    %al,(%edx)
0xc000009f:     xchg   %eax,%edi
---Type &lt;return> to continue, or q &lt;return> to quit---
0xc00000a0:     (bad)
0xc00000a1:     add    %al,%al
0xc00000a3:     add    %al,(%eax)
0xc00000a5:     add    %al,(%eax)
0xc00000a7:     flds   0x400800(%eax)
0xc00000ad:     add    %al,(%ecx)
0xc00000af:     xchg   %eax,%edi
0xc00000b0:     (bad)
0xc00000b1:     add    %al,%al
0xc00000b3:     xchg   %eax,%edi
0xc00000b4:     (bad)
0xc00000b5:     add    %al,%al
0xc00000b7:     mov    $0x82,%al
0xc00000b9:     add    %al,%al
0xc00000bb:     or     %al,(%eax)
0xc00000bd:     add    %al,(%eax)
0xc00000bf:     sti
0xc00000c0:     iret
0xc00000c1:     cli
0xc00000c2:     push   $0x0
0xc00000c4:     push   $0x0
0xc00000c6:     jmp    0xc0000099
0xc00000c8:     cli
0xc00000c9:     push   $0x0
0xc00000cb:     push   $0x1
0xc00000cd:     jmp    0xc0000099
0xc00000cf:     cli
0xc00000d0:     push   $0x0
0xc00000d2:     push   $0x2
0xc00000d4:     jmp    0xc0000099
0xc00000d6:     cli
0xc00000d7:     push   $0x0
0xc00000d9:     add    %eax,(%ecx)
0xc00000db:     adc    %al,(%ecx)
0xc00000dd:     adc    %eax,(%ecx)
0xc00000df:     adc    (%ecx),%al
0xc00000e1:     add    (%ecx),%eax
0xc00000e3:     adc    (%ecx),%eax
0xc00000e5:     adc    $0x1,%al
0xc00000e7:     adc    $0x16010501,%eax
0xc00000ec:     add    %edx,(%edi)
0xc00000ee:     add    %ebx,(%eax)
End of assembler dump.
(gdb) x/72b 0xc0000090
0xc0000090:     0x01    0xe6    0x21    0xb0    0x01    0xe6    0xa1    0x58
0xc0000098:     0xc3    0x56    0x45    0x53    0x41    0x00    0x02    0x97
0xc00000a0:     0x82    0x00    0xc0    0x00    0x00    0x00    0x00    0xd9
0xc00000a8:     0x80    0x00    0x08    0x40    0x00    0x00    0x01    0x97
0xc00000b0:     0x82    0x00    0xc0    0x97    0x82    0x00    0xc0    0xb0
0xc00000b8:     0x82    0x00    0xc0    0x08    0x00    0x00    0x00    0xfb
0xc00000c0:     0xcf    0xfa    0x6a    0x00    0x6a    0x00    0xeb    0xd1
0xc00000c8:     0xfa    0x6a    0x00    0x6a    0x01    0xeb    0xca    0xfa
0xc00000d0:     0x6a    0x00    0x6a    0x02    0xeb    0xc3    0xfa    0x6a
(gdb)
</code>

<p>
However, if we compare this with the ndisasm of kernel.bin near this area: 
</p>

<code>
00000040  EA470000C00800    jmp dword 0x8:0xc0000047
00000047  E82A000000        call dword 0x76
0000004C  B0FF              mov al,0xff
0000004E  E621              out 0x21,al
00000050  E6A1              out 0xa1,al
00000052  0F011D0A0200C0    lidt [dword 0xc000020a]
00000059  B101              mov cl,0x1
0000005B  B401              mov ah,0x1
0000005D  D2E4              shl ah,cl
0000005F  80F4FF            xor ah,0xff
00000062  E421              in al,0x21
00000064  20E0              and al,ah
00000066  E621              out 0x21,al
00000068  FF35200300C0      push dword [dword 0xc0000320]
0000006E  E8B22D0000        call dword 0x2e25
00000073  F4                hlt
00000074  EBFE              jmp short 0x74
00000076  50                push eax
00000077  B011              mov al,0x11
00000079  E620              out 0x20,al
0000007B  B011              mov al,0x11
0000007D  E6A0              out 0xa0,al
0000007F  B020              mov al,0x20
00000081  E621              out 0x21,al
00000083  B028              mov al,0x28
00000085  E6A1              out 0xa1,al
00000087  B004              mov al,0x4
00000089  E621              out 0x21,al
0000008B  B002              mov al,0x2
0000008D  E6A1              out 0xa1,al
0000008F  B001              mov al,0x1
00000091  E621              out 0x21,al
00000093  B001              mov al,0x1
00000095  E6A1              out 0xa1,al
00000097  58                pop eax
00000098  C3                ret
00000099  60                pushad
0000009A  668CD8            mov ax,ds
0000009D  50                push eax
0000009E  66B81000          mov ax,0x10
000000A2  8ED8              mov ds,ax
000000A4  8EC0              mov es,ax
000000A6  8EE0              mov fs,ax
000000A8  8EE8              mov gs,ax
000000AA  E8CA2C0000        call dword 0x2d79
000000AF  58                pop eax
000000B0  8ED8              mov ds,ax
000000B2  8EC0              mov es,ax
000000B4  8EE0              mov fs,ax
000000B6  8EE8              mov gs,ax
000000B8  61                popad
000000B9  81C408000000      add esp,0x8
000000BF  FB                sti
000000C0  CF                iretd
000000C1  FA                cli
000000C2  6A00              push byte +0x0
000000C4  6A00              push byte +0x0
000000C6  F4                hlt
000000C7  EBD0              jmp short 0x99
000000C9  FA                cli
000000CA  6A00              push byte +0x0
000000CC  6A01              push byte +0x1
000000CE  F4                hlt
000000CF  EBC8              jmp short 0x99
000000D1  FA                cli
000000D2  6A00              push byte +0x0
000000D4  6A02              push byte +0x2
000000D6  F4                hlt
000000D7  EBC0              jmp short 0x99
000000D9  FA                cli
000000DA  6A00              push byte +0x0
000000DC  6A03              push byte +0x3
000000DE  F4                hlt
000000DF  EBB8              jmp short 0x99
000000E1  FA                cli
000000E2  6A00              push byte +0x0
000000E4  6A04              push byte +0x4
000000E6  F4                hlt
000000E7  EBB0              jmp short 0x99
000000E9  FA                cli
000000EA  6A00              push byte +0x0
000000EC  6A05              push byte +0x5
000000EE  F4                hlt
000000EF  EBA8              jmp short 0x99
000000F1  FA                cli
000000F2  6A00              push byte +0x0
000000F4  6A06              push byte +0x6
000000F6  F4                hlt
</code>

<p>
and the corresponding hexdump: 
</p>

<code>
0000090 e601 b021 e601 58a1 60c3 8c66 50d8 b866
00000a0 0010 d88e c08e e08e e88e 8ae8 002c 5800
00000b0 d88e c08e e08e e88e 8161 08c4 0000 fb00
00000c0 facf 006a 006a d1eb 6afa 6a00 eb01 faca
00000d0 006a 026a c3eb 6afa 6a00 eb03 fabc 006a
00000e0 046a b5eb 6afa 6a00 eb05 faae 006a 066a
00000f0 a7eb 6afa 6a00 eb07 faa0 086a 9beb 6afa
</code>

<p>
We note that: 
</p>

<code>
0000090 e601 b021 e601 58a1 60c3 8c66 50d8 b866
00000a0 0010 d88e c08e e08e e88e 8ae8 002c 5800
00000b0 d88e c08e e08e e88e 8161 08c4 0000 fb00
00000c0 facf 006a 006a d1eb 6afa 6a00 eb01 faca
00000d0 006a 026a c3eb 6afa 6a00 eb03 fabc 006a
00000e0 046a b5eb 6afa 6a00 eb05 faae 006a 066a
00000f0 a7eb 6afa 6a00 eb07 faa0 086a 9beb 6afa
</code>

<p>
Or, more usefully (though difficult to come by--the manpage on hexdump's -e
option was a bit of a struggle, though quite complete and helpful once you
understand the idea):
</p>


<code>(20090823:231823 zoom@Ziggy ~/toast/source/hh)>hexdump -s 0x90 -v -n 64 -e '"0x%04_ax:  "' -e '8/1 "%02x "' -e '"\n"'  kernel.bin
0x0090:  01 e6 21 b0 01 e6 a1 58
0x0098:  c3 60 66 8c d8 50 66 b8
0x00a0:  10 00 8e d8 8e c0 8e e0
0x00a8:  8e e8 e8 8a 2c 00 00 58
0x00b0:  8e d8 8e c0 8e e0 8e e8
0x00b8:  61 81 c4 08 00 00 00 fb
0x00c0:  cf fa 6a 00 6a 00 eb d1
0x00c8:  fa 6a 00 6a 01 eb ca fa
</code>

<p>versus</p>

<code>
0xc0000090:     0x01    0xe6    0x21    0xb0    0x01    0xe6    0xa1    0x58
0xc0000098:     0xc3    0x56    0x45    0x53    0x41    0x00    0x02    0x97
0xc00000a0:     0x82    0x00    0xc0    0x00    0x00    0x00    0x00    0xd9
0xc00000a8:     0x80    0x00    0x08    0x40    0x00    0x00    0x01    0x97
0xc00000b0:     0x82    0x00    0xc0    0x97    0x82    0x00    0xc0    0xb0
0xc00000b8:     0x82    0x00    0xc0    0x08    0x00    0x00    0x00    0xfb
0xc00000c0:     0xcf    0xfa    0x6a    0x00    0x6a    0x00    0xeb    0xd1
0xc00000c8:     0xfa    0x6a    0x00    0x6a    0x01    0xeb    0xca    0xfa
0xc00000d0:     0x6a    0x00    0x6a    0x02    0xeb    0xc3    0xfa    0x6a
</code>

<p>has issues starting at 0xC0000099.  Reformatting: </p>

<p>kernel.bin's: </p>

<code>
0x0090:  01 e6 21 b0 01 e6 a1 58
0x0098:  c3 60 66 8c d8 50 66 b8
0x00a0:  10 00 8e d8 8e c0 8e e0
0x00a8:  8e e8 e8 8a 2c 00 00 58
0x00b0:  8e d8 8e c0 8e e0 8e e8
0x00b8:  61 81 c4 08 00 00 00 fb
0x00c0:  cf fa 6a 00 6a 00 eb d1
0x00c8:  fa 6a 00 6a 01 eb ca fa
</code>

<p>versus qemu's: </p>

<code>
0x0090:  01 e6 21 b0 01 e6 a1 58
0x0098:  c3 56 45 53 41 00 02 97
0x00a0:  82 00 c0 00 00 00 00 d9
0x00a8:  80 00 08 40 00 00 01 97
0x00b0:  82 00 c0 97 82 00 c0 b0
0x00b8:  82 00 c0 08 00 00 00 fb
0x00c0:  cf fa 6a 00 6a 00 eb d1
0x00c8:  fa 6a 00 6a 01 eb ca fa
</code>

<p>
differ from 0x99 to 0xba (which interestingly, in the kernel.bin disassembly,
corresponds pretty much exactly to: 
</p>

<code>
00000099  60                pushad
0000009A  668CD8            mov ax,ds
0000009D  50                push eax
0000009E  66B81000          mov ax,0x10
000000A2  8ED8              mov ds,ax
000000A4  8EC0              mov es,ax
000000A6  8EE0              mov fs,ax
000000A8  8EE8              mov gs,ax
000000AA  E88A2C0000        call dword 0x2d39
000000AF  58                pop eax
000000B0  8ED8              mov ds,ax
000000B2  8EC0              mov es,ax
000000B4  8EE0              mov fs,ax
000000B6  8EE8              mov gs,ax
000000B8  61                popad
000000B9  81C408000000      add esp,0x8
</code>

<p>
the general interrupt handler!  Though I suspect this is not the only
corrupted area.)  
</p>

<p>
At some point, this memory seems to be getting trashed, and I suspect it is
when we write the page tables.  But in any case the plan of attack now should
be to look for exactly when the trashing occurs.  For instance, we know it is
after boot, as the binary has it correct (and disassembles to the correct
thing as well).
</p>

<p>
The first obstruction is to find out where the code is before we enable
paging, but even before that, we'll just have a quick look by making it halt
just after paging is enabled and inspect the same region of memory then in
GDB: 
</p>

<code>
0xc0000090:     0x01    0xe6    0x21    0xb0    0x01    0xe6    0xa1    0x58
0xc0000098:     0xc3    0x56    0x45    0x53    0x41    0x00    0x02    0x97
0xc00000a0:     0x82    0x00    0xc0    0x00    0x00    0x00    0x00    0xd9
0xc00000a8:     0x80    0x00    0x08    0x40    0x00    0x00    0x01    0x97
0xc00000b0:     0x82    0x00    0xc0    0x97    0x82    0x00    0xc0    0xb0
0xc00000b8:     0x82    0x00    0xc0    0x08    0x00    0x00    0x00    0xfb
0xc00000c0:     0xcf    0xfa    0x6a    0x00    0x6a    0x00    0xeb    0xd1
0xc00000c8:     0xfa    0x6a    0x00    0x6a    0x01    0xeb    0xca    0xfa
0xc00000d0:     0x6a    0x00    0x6a    0x02    0xeb    0xc3    0xfa    0x6a
</code>

<p>
So it is wrong already by this point.  So we actually have to do some work,
but not that much.  boot.asm has the kernel loaded at 0x10000, so we should
just have to look at 0x10090 before (or even after, as there is still an
id-mapped chunk) paging is enabled.  Behold (from the same debugging session): 
</p>

<code>
(gdb) x/72b 0x10090
0x10090:        0x01    0xe6    0x21    0xb0    0x01    0xe6    0xa1    0x58
0x10098:        0xc3    0x56    0x45    0x53    0x41    0x00    0x02    0x97
0x100a0:        0x82    0x00    0xc0    0x00    0x00    0x00    0x00    0xd9
0x100a8:        0x80    0x00    0x08    0x40    0x00    0x00    0x01    0x97
0x100b0:        0x82    0x00    0xc0    0x97    0x82    0x00    0xc0    0xb0
0x100b8:        0x82    0x00    0xc0    0x08    0x00    0x00    0x00    0xfb
0x100c0:        0xcf    0xfa    0x6a    0x00    0x6a    0x00    0xeb    0xd1
0x100c8:        0xfa    0x6a    0x00    0x6a    0x01    0xeb    0xca    0xfa
0x100d0:        0x6a    0x00    0x6a    0x02    0xeb    0xc3    0xfa    0x6a
(gdb)  
</code>

<p>
Good.  Now we hlt earlier (before setting up the page tables at
all--i.e. after initizing VESA) and get: 
</p>

<code>
0x000083d2 in ?? ()
(gdb) x/72b 0x10090
0x10090:        0x01    0xe6    0x21    0xb0    0x01    0xe6    0xa1    0x58
0x10098:        0xc3    0x56    0x45    0x53    0x41    0x00    0x02    0x97
0x100a0:        0x82    0x00    0xc0    0x00    0x00    0x00    0x00    0xd9
0x100a8:        0x80    0x00    0x08    0x40    0x00    0x00    0x01    0x97
0x100b0:        0x82    0x00    0xc0    0x97    0x82    0x00    0xc0    0xb0
0x100b8:        0x82    0x00    0xc0    0x08    0x00    0x00    0x00    0xfb
0x100c0:        0xcf    0xfa    0x6a    0x00    0x6a    0x00    0xeb    0xd1
0x100c8:        0xfa    0x6a    0x00    0x6a    0x01    0xeb    0xca    0xfa
0x100d0:        0x6a    0x00    0x6a    0x02    0xeb    0xc3    0xfa    0x6a
(gdb)  
</code>

<p>
So still messed up...  Without initize VESA (i.e. hlt in the same place, but
initizeVESA line commented out)?  
</p>

<code>
0x000083cf in ?? ()
(gdb) x/72b 0x10090
0x10090:        0x01    0xe6    0x21    0xb0    0x01    0xe6    0xa1    0x58
0x10098:        0xc3    0x60    0x66    0x8c    0xd8    0x50    0x66    0xb8
0x100a0:        0x10    0x00    0x8e    0xd8    0x8e    0xc0    0x8e    0xe0
0x100a8:        0x8e    0xe8    0xe8    0x8a    0x2c    0x00    0x00    0x58
0x100b0:        0x8e    0xd8    0x8e    0xc0    0x8e    0xe0    0x8e    0xe8
0x100b8:        0x61    0x81    0xc4    0x08    0x00    0x00    0x00    0xfb
0x100c0:        0xcf    0xfa    0x6a    0x00    0x6a    0x00    0xeb    0xd1
0x100c8:        0xfa    0x6a    0x00    0x6a    0x01    0xeb    0xca    0xfa
0x100d0:        0x6a    0x00    0x6a    0x02    0xeb    0xc3    0xfa    0x6a
(gdb) 
</code>

<p>
We have a winner!  Now where did we go wrong.  Since we're in a debugging
mood, we just stick rets in various places in the initizeVESA function and
see: 
</p>

<p>
No VESA init (the correct version): 
</p>

<code>
0x000083d3 in ?? ()
(gdb) x/72b 0x10090
0x10090:        0x01    0xe6    0x21    0xb0    0x01    0xe6    0xa1    0x58
0x10098:        0xc3    0x60    0x66    0x8c    0xd8    0x50    0x66    0xb8
0x100a0:        0x10    0x00    0x8e    0xd8    0x8e    0xc0    0x8e    0xe0
0x100a8:        0x8e    0xe8    0xe8    0x8a    0x2c    0x00    0x00    0x58
0x100b0:        0x8e    0xd8    0x8e    0xc0    0x8e    0xe0    0x8e    0xe8
0x100b8:        0x61    0x81    0xc4    0x08    0x00    0x00    0x00    0xfb
0x100c0:        0xcf    0xfa    0x6a    0x00    0x6a    0x00    0xeb    0xd1
0x100c8:        0xfa    0x6a    0x00    0x6a    0x01    0xeb    0xca    0xfa
0x100d0:        0x6a    0x00    0x6a    0x02    0xeb    0xc3    0xfa    0x6a
(gdb)  
</code>

<p>
After just VESA info filled: 
</p>

<code>
0x000083d3 in ?? ()
(gdb) x/72b 0x10090
0x10090:        0x01    0xe6    0x21    0xb0    0x01    0xe6    0xa1    0x58
0x10098:        0xc3    0x60    0x56    0x45    0x53    0x41    0x00    0x02
0x100a0:        0x97    0x82    0x00    0xc0    0x00    0x00    0x00    0x00
0x100a8:        0xda    0x80    0x00    0x08    0x40    0x00    0x00    0x01
0x100b0:        0x97    0x82    0x00    0xc0    0x97    0x82    0x00    0xc0
0x100b8:        0xb0    0x82    0x00    0xc0    0x00    0x00    0x00    0xfb
0x100c0:        0xcf    0xfa    0x6a    0x00    0x6a    0x00    0xeb    0xd1
0x100c8:        0xfa    0x6a    0x00    0x6a    0x01    0xeb    0xca    0xfa
0x100d0:        0x6a    0x00    0x6a    0x02    0xeb    0xc3    0xfa    0x6a
(gdb)
</code>

<p>
After mode info filled: 
</p>

<code>
0x000083d3 in ?? ()
(gdb) x/72b 0x10090
0x10090:        0x01    0xe6    0x21    0xb0    0x01    0xe6    0xa1    0x58
0x10098:        0xc3    0x60    0x56    0x45    0x53    0x41    0x00    0x02
0x100a0:        0x97    0x82    0x00    0xc0    0x00    0x00    0x00    0x00
0x100a8:        0xda    0x80    0x00    0x08    0x40    0x00    0x00    0x01
0x100b0:        0x97    0x82    0x00    0xc0    0x97    0x82    0x00    0xc0
0x100b8:        0xb0    0x82    0x00    0xc0    0x00    0x00    0x00    0xfb
0x100c0:        0xcf    0xfa    0x6a    0x00    0x6a    0x00    0xeb    0xd1
0x100c8:        0xfa    0x6a    0x00    0x6a    0x01    0xeb    0xca    0xfa
0x100d0:        0x6a    0x00    0x6a    0x02    0xeb    0xc3    0xfa    0x6a
(gdb)
</code>

<p>
After set mode (all of VESA init complete): 
</p>

<code>
0x00008931 in ?? ()
(gdb) x/72b 0x10090
0x10090:        0x01    0xe6    0x21    0xb0    0x01    0xe6    0xa1    0x58
0x10098:        0xc3    0x56    0x45    0x53    0x41    0x00    0x02    0x97
0x100a0:        0x82    0x00    0xc0    0x00    0x00    0x00    0x00    0xd9
0x100a8:        0x80    0x00    0x08    0x40    0x00    0x00    0x01    0x97
0x100b0:        0x82    0x00    0xc0    0x97    0x82    0x00    0xc0    0xb0
0x100b8:        0x82    0x00    0xc0    0x08    0x00    0x00    0x00    0xfb
0x100c0:        0xcf    0xfa    0x6a    0x00    0x6a    0x00    0xeb    0xd1
0x100c8:        0xfa    0x6a    0x00    0x6a    0x01    0xeb    0xca    0xfa
0x100d0:        0x6a    0x00    0x6a    0x02    0xeb    0xc3    0xfa    0x6a
(gdb)
</code>

<p>
So it seems to get trashed twice--once by the vesa info filler and once by the
mode setter (and, while it is untouched by the mode info filler, perhaps
that's just because we're not looking at all memory).  
</p>

<p>
We now have an obvious course of action, which is to do what would seem to
eventually be necessary and put the actual kernel loading code into stage2
after the VESA work is done (being careful to store what info we need from the
VESA blocks before trashing it by loading the kernel).  
</p>

<p>
To get a handle on these things we run our earlier code (for printing out the
contents of variables in pmode with text-mode VESA) on eax = VESA_Info to get
(remembering that it prints backwards...): 0008097, and for Mode_Info: 0008297
(I'd better not get used to this reading backwards thing...).  This should be
out of the way of everything!  What else is messed with by VESAinit?  Maybe it
has something to do with this es:di thing (where we start the VESAinit
function with 
</p>

<code>
        push  cs
        pop   ds
        mov   ax,ds
        mov   es,ax
</code>

<p>
wihtout ever checking what cs is.  ... After getting the value we see:
00000008.  So is 08:8097, which works out to 8*10+8097 = 8117, and 8317
similarly, which is still not in the range of values we expect to be
affected...
</p>

<p>But further, there is the mystery of why the mode-setting int changes
anything.  Ah--according to Ralf Brown int 10 with ax = 4f02 fills some `CRTC'
info at es:di under VBE3.  So if we have a VBE3 card (in QEMU as well as our
RHW testbed...?) then this may explain why stuff is getting modified, but not
in the range we're seeing.  
</p>

<p>
This is curious, and worth coming back to, but a good I think now moving the
loading code (which should be quite small) into stage2 and after the VESA
initization is fine, as it will need to happen anyways.  (Again, though, we
need to ensure to not lose the [ModeInfo_PhysBasePtr] value in the process.  
</p>

<p>But this is a project for tomorrow, so bye for now.  </p>

<p>24:014727</p>

</text>
</post>
